import base64, hashlib, os

code = ""
decoded = base64.b64decode(code).decode()

current_hash = hashlib.sha256(decoded.encode()).hexdigest()

expected_hash = "ede54e7aaed3628e8e8924487a5432321542a7fb5b4a2d55cf7143bd0edb998c"

if current_hash != expected_hash:
    print("Warning labele modifika bei...")
    os.remove(__file__)
    exit()

exec(decoded)
